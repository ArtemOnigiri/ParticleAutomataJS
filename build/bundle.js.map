{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/components/Visual.svelte","../../src/components/InputRange.svelte","../../src/components/Checkbox.svelte","../../src/components/ParticleSelector.svelte","../../node_modules/svelte/store/index.mjs","../../src/translations.ts","../../src/components/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : context || []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : options.context || []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.42.6' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<script lang=\"ts\">\n  import { afterUpdate } from \"svelte\";\n  import type { Particle } from \"../types\";\n\n  export let width: number;\n  export let height: number;\n  export let links: { a: Particle; b: Particle }[];\n  export let fields: Particle[][][];\n  export let fw: number;\n  export let fh: number;\n  export let r: number;\n  export let colors: string[];\n  export let drawConnections = true;\n  export let changeFormBySpeed = true;\n  export let displacementMultiplier = 1;\n\n  let canvas: HTMLCanvasElement;\n\n  const BG_COLOR = \"#141e46\";\n  const LINK_COLOR = \"rgba(255, 230, 0, 0.7)\";\n\n  afterUpdate(() => {\n    function drawCircle(p: Particle) {\n      ctx.fillStyle = colors[p.type] || \"white\";\n      ctx.beginPath();\n      ctx.arc(p.x, p.y, r, 0, 2 * Math.PI);\n      ctx.fill();\n      // ctx.fillRect(x - 5, y - 5, 10, 10);\n    }\n    function drawCircle2(p: Particle) {\n      function lineEnd(\n        x: number,\n        y: number,\n        angle: number,\n        length: number\n      ): [number, number] {\n        return [x + Math.cos(angle) * length, y + Math.sin(angle) * length];\n      }\n      const angle = Math.atan2(p.y - p.lastY, p.x - p.lastX);\n      const speed = Math.hypot(p.x - p.lastX, p.y - p.lastY);\n      ctx.fillStyle = colors[p.type] || \"white\";\n      ctx.beginPath();\n      ctx.ellipse(\n        p.x,\n        p.y,\n        Math.min(r * ((speed * displacementMultiplier) ** 2 + 1), 10),\n        r,\n        angle,\n        0,\n        Math.PI * 2\n      );\n      ctx.fill();\n      // ctx.beginPath();\n      // ctx.moveTo(p.x, p.y);\n      // ctx.lineTo(...lineEnd(p.x, p.y, angle, 10));\n      // ctx.lineWidth = 1;\n      // ctx.strokeStyle = \"white\";\n      // ctx.stroke();\n\n      // ctx.fillRect(x - 5, y - 5, 10, 10);\n    }\n    const ctx = canvas.getContext(\"2d\");\n    ctx.fillStyle = BG_COLOR;\n    ctx.fillRect(0, 0, width, height);\n    if (drawConnections) {\n      for (let i = 0; i < links.length; i++) {\n        const a = links[i].a;\n        const b = links[i].b;\n        ctx.beginPath();\n        ctx.moveTo(a.x, a.y);\n        ctx.lineTo(b.x, b.y);\n        const gradient = ctx.createLinearGradient(a.x, a.y, b.x, b.y);\n        gradient.addColorStop(0, colors[a.type]);\n        gradient.addColorStop(1, colors[b.type]);\n        ctx.strokeStyle = gradient;\n        ctx.lineWidth = Math.max(\n          r * 2 - Math.hypot(a.x - b.x, a.y - b.y) / 4,\n          2\n        );\n        // ctx.globalAlpha = ctx.lineWidth / 10;\n        ctx.stroke();\n      }\n    }\n    for (let i = 0; i < fw; i++) {\n      for (let j = 0; j < fh; j++) {\n        const field = fields[i][j];\n        for (let k = 0; k < field.length; k++) {\n          const a = field[k];\n          // ctx.globalAlpha = 1;\n          if (changeFormBySpeed) {\n            drawCircle2(a);\n          } else {\n            drawCircle(a);\n          }\n        }\n      }\n    }\n  });\n</script>\n\n<canvas bind:this={canvas} {width} {height} on:click />\n\n<style>\n  canvas {\n    display: block;\n    position: fixed;\n    top: 0;\n    left: 0;\n    background-color: red;\n  }\n</style>\n","<script lang=\"ts\">\n  export let name: string;\n  export let min: number = 0;\n  export let max: number = 100;\n  export let value: number = min;\n  export let step: number = 1;\n</script>\n\n<label class=\"wrapper\">\n  <div>{name}: {value}</div>\n  <input type=\"range\" bind:value {min} {max} {step} />\n</label>\n\n<style>\n  .wrapper {\n    /* display: flex; */\n    display: block;\n    /* font-weight: bold; */\n  }\n  .wrapper:not(:last-child) {\n    margin-bottom: 10px;\n  }\n  input {\n    display: block;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    /* margin-left: 10px; */\n    /* transform: translateY(-4px); */\n  }\n  div {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    text-transform: uppercase;\n    overflow: hidden;\n    /* font-family: monospace; */\n    font-size: 65%;\n  }\n  input {\n    margin-top: 2px;\n  }\n</style>\n","<script>\n  export let title;\n  export let checked = false;\n</script>\n\n<label>\n  <input type=\"checkbox\" bind:checked />\n  <span>{title}</span>\n</label>\n\n<style>\n  label {\n    display: inline-block;\n    cursor: pointer;\n    margin-bottom: 5px;\n  }\n  input {\n    position: relative;\n    appearance: none;\n    margin: 0;\n    padding: 0;\n  }\n  input::before {\n    content: \"\";\n    position: absolute;\n    display: block;\n    width: 15px;\n    height: 15px;\n    transform: translate(0, -14px);\n    border-radius: 3px;\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n  input::after {\n    content: \"\";\n    position: absolute;\n    display: block;\n    width: 5px;\n    height: 10px;\n    border-bottom: 3px solid;\n    border-right: 3px solid;\n    border-color: rgb(255, 255, 255);\n    opacity: 0;\n    transform: translate(4px, -16px) rotate(45deg);\n    /* background-color: red; */\n    transition-duration: 0.2s;\n  }\n  input:checked::after {\n    opacity: 1;\n    transform: translate(4px, -14px) rotate(45deg);\n  }\n  span {\n    margin-left: 20px;\n  }\n</style>\n","<script lang=\"ts\">\n  export let colors: string[] = [];\n  export let selectedId: number = 0;\n</script>\n\n<div class=\"wrapper\">\n  {#each Array(...colors.entries()) as idAndColor}\n    <button\n      class:selected={selectedId === idAndColor[0]}\n      name=\"color\"\n      type=\"radio\"\n      style={`background-color: ${idAndColor[1]};`}\n      on:click={() => (selectedId = idAndColor[0])}\n    />\n  {/each}\n</div>\n\n<style>\n  .selected:before {\n    content: \"\";\n    display: block;\n    width: 6px;\n    height: 14px;\n    border-bottom: 3px solid white;\n    border-right: 3px solid white;\n    transform: translateY(-2px) rotate(45deg);\n  }\n  .wrapper {\n    display: flex;\n    /* flex-wrap: wrap; */\n    overflow: hidden;\n    border-radius: 5px;\n    /* border: 2px dotted rgba(0, 0, 0, 0.5); */\n  }\n  button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 29px;\n    padding: 0;\n    margin: 0;\n    border-radius: 0;\n  }\n  /* label {\n    font-size: 75%;\n    text-align: center;\n    width: 30px;\n    line-height: 30px;\n    overflow: hidden;\n    cursor: pointer;\n    width: 100%;\n  }\n  label:hover {\n    box-shadow: inset 0 0 0 100px rgba(0, 0, 0, 0.1);\n  }\n  input {\n    appearance: none;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n  }\n  input:checked::before {\n    content: \"\";\n    display: block;\n    width: 5px;\n    height: 10px;\n    border-bottom: 3px solid white;\n    border-right: 3px solid white;\n    transform: rotate(45deg) translateY(-1px);\n    margin-right: 7px;\n  } */\n</style>\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","export default {\n    showSettings: {\n        en: \"Show settings\",\n        ru: \"Показать настройки\"\n    },\n    hideSettings: {\n        en: \"Hide settings\",\n        ru: \"Скрыть настройки\"\n    },\n    copyLink: {\n        en: \"Copy link\",\n        ru: \"Копировать ссылку\"\n    },\n    currentWorldSettings: {\n        en: \"Current world settings\",\n        ru: \"Настройки мира\",\n    },\n    simulationsPerFrame: {\n        en: \"Simulations per frame\",\n        ru: \"Шагов симуляции за кадр\",\n    },\n    temperature: {\n        en: \"Temperature\",\n        ru: \"Температура\",\n    },\n    friction: {\n        en: \"Anti-friction\",\n        ru: \"Анти-трение\",\n    },\n    killAllParticles: {\n        en: \"Kill all particles\",\n        ru: \"Уничтожить все частицы\",\n    },\n    newWorldSettings: {\n        en: \"New world settings\",\n        ru: \"Настройки нового мира\",\n    },\n    particleTypesAmount: {\n        en: \"Particle types amount\",\n        ru: \"Кол-во видов (цветов) частиц\",\n    },\n    particleCount: {\n        en: \"Particle count\",\n        ru: \"Кол-во частиц\",\n    },\n    createNewWorld: {\n        en: \"Create new world\",\n        ru: \"Создать новый мир\",\n    },\n    particleBrush: {\n        en: \"Particle brush\",\n        ru: \"Кисть частиц\",\n    },\n    graphicalSettings: {\n        en: \"Graphical settings\",\n        ru: \"Настройки просмотра\",\n    },\n    drawConnections: {\n        en: \"Draw connections\",\n        ru: \"Отображать соединения\",\n    },\n    particleRadius: {\n        en: \"Particle radius\",\n        ru: \"Радиус частицы\",\n    },\n    changeFormBySpeed: {\n        en: \"Change particle form by speed\",\n        ru: \"Искажать форму частицы в зависимости от скорости\",\n    },\n    displacementMultiplier: {\n        en: \"Displacement multiplier\",\n        ru: \"Множитель искажения\",\n    }\n};\n","<script lang=\"ts\">\n  import Visual from \"./Visual.svelte\";\n  import InputRange from \"./InputRange.svelte\";\n  import Checkbox from \"./Checkbox.svelte\";\n  import ParticleSelector from \"./ParticleSelector.svelte\";\n  import type { Particle } from \"../types\";\n  import { writable } from \"svelte/store\";\n  import TRANSLATIONS from \"../translations\";\n\n  function getTranslation(lang: string, key: string) {\n    const phrase: { [key: string]: string } = TRANSLATIONS[key];\n    return Object.keys(phrase).includes(lang) ? phrase[lang] : phrase[\"en\"];\n  }\n\n  let width: number = window.innerWidth;\n  let height: number = window.innerHeight;\n\n  let lang = new URLSearchParams(location.search).get(\"lang\") || \"en\";\n\n  const COLORS = [\n    \"#fa1414\",\n    \"#c88c64\",\n    \"#50aa8c\",\n    \"#0096e6\",\n    \"#0a14e6\",\n    \"#8200c8\",\n    \"#fa96d2\",\n    \"#828282\",\n    \"green\",\n    \"white\",\n  ];\n\n  let showSettings = true;\n\n  let r = Number(new URLSearchParams(location.search).get(\"radius\")) || 5;\n  let nodeCount =\n    Number(new URLSearchParams(location.search).get(\"count\")) || 750;\n  let MAX_DIST =\n    Number(new URLSearchParams(location.search).get(\"max_dist\")) || 100;\n  let speedMultiplier =\n    Number(new URLSearchParams(location.search).get(\"temperature\")) || 4;\n  const BORDER = 10;\n  let selectedId = 0;\n\n  let friction =\n    Number(new URLSearchParams(location.search).get(\"friction\")) || 0.98;\n\n  let drawConnections = true;\n  let changeFormBySpeed = true;\n  let displacementMultiplier = 1;\n\n  const maxDist2 = MAX_DIST * MAX_DIST;\n  let fw = width / MAX_DIST + 1;\n  let fh = height / MAX_DIST + 1;\n\n  let RULE_SIZE = 3;\n  let MAX_LINKS = [];\n  let COUPLINGS: number[][] = [];\n  let MAX_LINKS_PER_COLOR = [];\n\n  let links: { a: Particle; b: Particle }[] = [];\n  let fields: Particle[][][] = [];\n\n  let settingRuleSize = writable(3);\n  let simulationsPerFrame = 5;\n\n  if (location.hash) {\n    let hash = location.hash.substring(1).split(\"-\");\n    let c = 0;\n    $settingRuleSize = ~~hash[c];\n    RULE_SIZE = $settingRuleSize;\n    // settingRange.value = RULE_SIZE;\n    // rangeValue.textContent = RULE_SIZE;\n    startNew();\n    c++;\n    for (let i = 0; i < RULE_SIZE; i++) {\n      MAX_LINKS[i] = (Number(hash[c]) >> (i * 2)) & 3;\n    }\n    c++;\n    for (let i = 0; i < RULE_SIZE; i++) {\n      for (let j = 0; j < RULE_SIZE; j++) {\n        COUPLINGS[i][j] = ((Number(hash[c]) >> (j * 2)) & 3) - 1;\n      }\n      c++;\n    }\n    for (let i = 0; i < RULE_SIZE; i++) {\n      for (let j = 0; j < RULE_SIZE; j++) {\n        MAX_LINKS_PER_COLOR[i][j] = (Number(hash[c]) >> (j * 2)) & 3;\n      }\n      c++;\n    }\n    history.pushState(null, null, \" \");\n  } else {\n    startNew();\n  }\n\n  requestAnimationFrame(update);\n\n  function startNew() {\n    selectedId = 0;\n    generateRules();\n    generateNodes();\n  }\n\n  function generateNodes() {\n    links = [];\n    fields = [];\n    for (let i = 0; i < fw; i++) {\n      fields.push([]);\n      for (let j = 0; j < fh; j++) {\n        fields[i].push([]);\n      }\n    }\n    for (let i = 0; i < nodeCount; i++) {\n      addParticle(\n        Math.random() * width,\n        Math.random() * height,\n        ~~(Math.random() * RULE_SIZE)\n      );\n    }\n  }\n\n  function generateRules() {\n    RULE_SIZE = $settingRuleSize;\n    MAX_LINKS = [];\n    COUPLINGS = [];\n    MAX_LINKS_PER_COLOR = [];\n    for (let i = 0; i < RULE_SIZE; i++) {\n      MAX_LINKS.push(~~(Math.random() * 4));\n      COUPLINGS.push([]);\n      MAX_LINKS_PER_COLOR.push([]);\n      for (let j = 0; j < RULE_SIZE; j++) {\n        COUPLINGS[i].push(Math.floor(Math.random() * 3 - 1));\n        MAX_LINKS_PER_COLOR[i].push(~~(Math.random() * 4));\n      }\n    }\n  }\n\n  function copyRules() {\n    let hash = \"\";\n    hash += RULE_SIZE;\n    let links_hash = 0;\n    for (let i = 0; i < RULE_SIZE; i++) {\n      links_hash |= MAX_LINKS[i] << (i * 2);\n    }\n    hash += \"-\" + links_hash;\n    for (let i = 0; i < RULE_SIZE; i++) {\n      let row = 0;\n      for (let j = 0; j < RULE_SIZE; j++) {\n        row |= (COUPLINGS[i][j] + 1) << (j * 2);\n      }\n      hash += \"-\" + row;\n    }\n    for (let i = 0; i < RULE_SIZE; i++) {\n      let row = 0;\n      for (let j = 0; j < RULE_SIZE; j++) {\n        row |= MAX_LINKS_PER_COLOR[i][j] << (j * 2);\n      }\n      hash += \"-\" + row;\n    }\n    hash = window.location.href + \"#\" + hash;\n    let tempInput = document.createElement(\"input\");\n    tempInput.value = hash;\n    document.body.appendChild(tempInput);\n    tempInput.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(tempInput);\n  }\n\n  function addParticle(x: number, y: number, type: number) {\n    let a: Particle = { x, y, type, sx: 0, sy: 0, bonds: [] };\n    const fx = Math.floor(x / MAX_DIST);\n    const fy = Math.floor(y / MAX_DIST);\n    fields[fx][fy].push(a);\n  }\n\n  function removeFromArray<T>(array: T[], item: T) {\n    array.splice(array.indexOf(item), 1);\n  }\n\n  function linkParticles(a: Particle, b: Particle) {\n    a.bonds.push(b);\n    b.bonds.push(a);\n    links.push({ a, b });\n  }\n\n  function applyForce(a: Particle, b: Particle) {\n    const dx = a.x - b.x;\n    const dy = a.y - b.y;\n    let dist2 = dx * dx + dy * dy;\n    if (dist2 < maxDist2) {\n      let da = COUPLINGS[a.type][b.type] / dist2;\n      let db = COUPLINGS[b.type][a.type] / dist2;\n      if (\n        a.bonds.length < MAX_LINKS[a.type] &&\n        b.bonds.length < MAX_LINKS[b.type]\n      ) {\n        if (dist2 < maxDist2 / 4) {\n          if (a.bonds.indexOf(b) === -1 && b.bonds.indexOf(a) === -1) {\n            let typeCountA = 0;\n            a.bonds.forEach((bond) => {\n              if (bond.type === b.type) typeCountA++;\n            });\n            let typeCountB = 0;\n            b.bonds.forEach((bond) => {\n              if (bond.type === a.type) typeCountB++;\n            });\n            if (\n              typeCountA < MAX_LINKS_PER_COLOR[a.type][b.type] &&\n              typeCountB < MAX_LINKS_PER_COLOR[b.type][a.type]\n            ) {\n              linkParticles(a, b);\n            }\n          }\n        }\n      } else {\n        if (a.bonds.indexOf(b) === -1 && b.bonds.indexOf(a) === -1) {\n          da = 1 / dist2;\n          db = 1 / dist2;\n        }\n      }\n      const angle = Math.atan2(a.y - b.y, a.x - b.x);\n      if (dist2 < 1) dist2 = 1;\n      if (dist2 < r * r * 4) {\n        da = 1 / dist2;\n        db = 1 / dist2;\n      }\n      a.sx += Math.cos(angle) * da * speedMultiplier;\n      a.sy += Math.sin(angle) * da * speedMultiplier;\n      b.sx -= Math.cos(angle) * db * speedMultiplier;\n      b.sy -= Math.sin(angle) * db * speedMultiplier;\n    }\n  }\n\n  function logic() {\n    for (let i = 0; i < fw; i++) {\n      for (let j = 0; j < fh; j++) {\n        const field = fields[i][j];\n        for (let k = 0; k < field.length; k++) {\n          const a = field[k];\n          a.lastX = a.x;\n          a.lastY = a.y;\n          a.x += a.sx;\n          a.y += a.sy;\n          a.sx *= friction;\n          a.sy *= friction;\n          const magnitude = Math.sqrt(a.sx * a.sx + a.sy * a.sy);\n          if (magnitude > 1) {\n            a.sx /= magnitude;\n            a.sy /= magnitude;\n          }\n          if (a.x < BORDER) {\n            a.sx += speedMultiplier * 0.05;\n            if (a.x < 0) {\n              a.x = -a.x;\n              a.sx *= -0.5;\n            }\n          } else if (a.x > width - BORDER) {\n            a.sx -= speedMultiplier * 0.05;\n            if (a.x > width) {\n              a.x = width * 2 - a.x;\n              a.sx *= -0.5;\n            }\n          }\n          if (a.y < BORDER) {\n            a.sy += speedMultiplier * 0.05;\n            if (a.y < 0) {\n              a.y = -a.y;\n              a.sy *= -0.5;\n            }\n          } else if (a.y > height - BORDER) {\n            a.sy -= speedMultiplier * 0.05;\n            if (a.y > height) {\n              a.y = height * 2 - a.y;\n              a.sy *= -0.5;\n            }\n          }\n        }\n      }\n    }\n    for (let i = 0; i < links.length; i++) {\n      const link = links[i];\n      const a = link.a;\n      const b = link.b;\n      const dx = a.x - b.x;\n      const dy = a.y - b.y;\n      let dist2 = dx * dx + dy * dy;\n      if (dist2 > maxDist2 / 4) {\n        removeFromArray(a.bonds, b);\n        removeFromArray(b.bonds, a);\n        removeFromArray(links, link);\n        i--;\n      } else {\n        if (dist2 > r * r * 4) {\n          const angle = Math.atan2(a.y - b.y, a.x - b.x);\n          const dA = -0.015;\n\n          a.sx += Math.cos(angle) * dA * speedMultiplier;\n          a.sy += Math.sin(angle) * dA * speedMultiplier;\n          b.sx -= Math.cos(angle) * dA * speedMultiplier;\n          b.sy -= Math.sin(angle) * dA * speedMultiplier;\n        }\n      }\n    }\n    for (let i = 0; i < fw; i++) {\n      for (let j = 0; j < fh; j++) {\n        const field = fields[i][j];\n        for (let k = 0; k < field.length; k++) {\n          const a = field[k];\n          const fx = Math.floor(a.x / MAX_DIST);\n          const fy = Math.floor(a.y / MAX_DIST);\n          if (fx !== i || fy !== j) {\n            removeFromArray(field, a);\n            fields[fx][fy].push(a);\n          }\n        }\n      }\n    }\n    for (let i = 0; i < fw; i++) {\n      for (let j = 0; j < fh; j++) {\n        const field = fields[i][j];\n        for (let i1 = 0; i1 < field.length; i1++) {\n          const a = field[i1];\n          for (let j1 = i1 + 1; j1 < field.length; j1++) {\n            const b = field[j1];\n            applyForce(a, b);\n          }\n          if (i < fw - 1) {\n            const iNext = i + 1;\n            const field1 = fields[iNext][j];\n            for (let j1 = 0; j1 < field1.length; j1++) {\n              const b = field1[j1];\n              applyForce(a, b);\n            }\n          }\n          if (j < fh - 1) {\n            const jNext = j + 1;\n            const field1 = fields[i][jNext];\n            for (let j1 = 0; j1 < field1.length; j1++) {\n              const b = field1[j1];\n              applyForce(a, b);\n            }\n            if (i < fw - 1) {\n              const iNext = i + 1;\n              const field2 = fields[iNext][jNext];\n              for (let j1 = 0; j1 < field2.length; j1++) {\n                const b = field2[j1];\n                applyForce(a, b);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function update() {\n    for (let i = 0; i < simulationsPerFrame; i++) logic();\n    fields = [...fields];\n    window.requestAnimationFrame(update);\n  }\n\n  // $: {\n  //   const searchParams = new URLSearchParams(\n  //     `?temperature=${speedMultiplier}&friction=${friction}&radius=${r}`\n  //   );\n  //   const newurl =\n  //     window.location.protocol +\n  //     \"//\" +\n  //     window.location.host +\n  //     window.location.pathname +\n  //     \"?\" +\n  //     searchParams.toString();\n  //   window.history.replaceState({ path: newurl }, \"\", newurl);\n  // }\n</script>\n\n<svelte:window bind:innerWidth={width} bind:innerHeight={height} />\n<main>\n  <Visual\n    {width}\n    {height}\n    {fields}\n    {links}\n    {fw}\n    {fh}\n    {r}\n    {drawConnections}\n    {changeFormBySpeed}\n    {displacementMultiplier}\n    colors={COLORS}\n    on:click={(e) => {\n      addParticle(\n        e.clientX + Math.random() - 0.5,\n        e.clientY + Math.random() - 0.5,\n        selectedId\n      );\n    }}\n  />\n  <div class=\"controls\" class:controls_opened={showSettings}>\n    {#if showSettings}\n      <!-- <div class=\"controls__col\"> -->\n      <div class=\"controls-block\">\n        <div class=\"buttons-row\">\n          <button on:click={() => (showSettings = false)}>\n            {getTranslation(lang, \"hideSettings\")}\n          </button>\n          <button on:click={copyRules}>\n            {getTranslation(lang, \"copyLink\")}\n          </button>\n        </div>\n      </div>\n      <div class=\"controls-block\">\n        <h2 class=\"controls-block__title\">\n          {getTranslation(lang, \"currentWorldSettings\")}\n        </h2>\n        <InputRange\n          name={getTranslation(lang, \"simulationsPerFrame\")}\n          min={1}\n          max={100}\n          bind:value={simulationsPerFrame}\n        />\n        <InputRange\n          name={getTranslation(lang, \"temperature\")}\n          min={0.1}\n          max={40}\n          step={0.1}\n          bind:value={speedMultiplier}\n        />\n        <InputRange\n          name={getTranslation(lang, \"friction\")}\n          min={0}\n          max={1}\n          step={0.01}\n          bind:value={friction}\n        />\n        <InputRange\n          name={getTranslation(lang, \"particleRadius\")}\n          min={3}\n          max={10}\n          step={0.01}\n          bind:value={r}\n        />\n        <div class=\"buttons-row\">\n          <button\n            on:click={() => {\n              fields = [];\n              for (let i = 0; i < fw; i++) {\n                fields.push([]);\n                for (let j = 0; j < fh; j++) {\n                  fields[i].push([]);\n                }\n              }\n              links = [];\n            }}\n          >\n            {getTranslation(lang, \"killAllParticles\")}\n          </button>\n        </div>\n      </div>\n      <div class=\"controls-block\">\n        <h2 class=\"controls-block__title\">\n          {getTranslation(lang, \"newWorldSettings\")}\n        </h2>\n        <InputRange\n          name={getTranslation(lang, \"particleTypesAmount\")}\n          bind:value={$settingRuleSize}\n          min={1}\n          max={COLORS.length}\n        />\n        <InputRange\n          name={getTranslation(lang, \"particleCount\")}\n          bind:value={nodeCount}\n          min={0}\n          max={5000}\n        />\n        <div class=\"buttons-row\">\n          <button on:click={startNew}>\n            {getTranslation(lang, \"createNewWorld\")}\n          </button>\n        </div>\n      </div>\n      <div class=\"controls-block\">\n        <h2 class=\"controls-block__title\">\n          {getTranslation(lang, \"particleBrush\")}\n        </h2>\n        <ParticleSelector\n          colors={COLORS.slice(0, COUPLINGS.length)}\n          bind:selectedId\n        />\n      </div>\n\n      <div class=\"controls-block\">\n        <h2 class=\"controls-block__title\">\n          {getTranslation(lang, \"graphicalSettings\")}\n        </h2>\n        <Checkbox\n          title={getTranslation(lang, \"drawConnections\")}\n          bind:checked={drawConnections}\n        />\n        <Checkbox\n          title={getTranslation(lang, \"changeFormBySpeed\")}\n          bind:checked={changeFormBySpeed}\n        />\n        <InputRange\n          name={getTranslation(lang, \"displacementMultiplier\")}\n          min={1}\n          max={10}\n          step={1}\n          bind:value={displacementMultiplier}\n        />\n      </div>\n      <!-- </div> -->\n      <!-- <div class=\"controls__col\">\n        <div class=\"controls-block\">\n          <h2 class=\"controls-block__title\">View settings</h2>\n          <div class=\"buttons-row\">\n            <button on:click={startNew}>Show connections</button>\n          </div>\n        </div>\n      </div> -->\n    {:else}\n      <button on:click={() => (showSettings = true)}>\n        {getTranslation(lang, \"showSettings\")}\n      </button>\n    {/if}\n  </div>\n</main>\n\n<style>\n  button {\n    padding: 8px 15px;\n    /* white-space: nowrap; */\n    /* overflow: hidden;\n    text-overflow: ellipsis; */\n  }\n  .controls {\n    overflow-y: scroll;\n    box-shadow: 0 0 10px 0 black;\n    /* display: flex; */\n    /* flex-direction: row; */\n    position: fixed;\n    /* width: 300px; */\n    max-height: calc(100% - 40px);\n    left: 20px;\n    top: 20px;\n    background-color: rgba(255, 255, 255, 0.5);\n    /* padding: 10px; */\n    border-radius: 5px;\n    backdrop-filter: blur(8px);\n    -webkit-backdrop-filter: blur(8px);\n    -ms-overflow-style: none; /* IE and Edge */\n    scrollbar-width: none; /* Firefox */\n    transition-duration: 0.2s;\n  }\n  .controls::-webkit-scrollbar {\n    display: none;\n  }\n  .controls_opened {\n    padding: 10px;\n    width: 300px;\n    border-radius: 10px;\n  }\n  .controls__col {\n    min-width: 300px;\n    max-width: 300px;\n  }\n  .controls__col + .controls__col {\n    /* min-width: 300px; */\n    margin-left: 10px;\n  }\n  .controls-block > * {\n    margin-bottom: 0;\n  }\n  .controls-block:not(:last-child) {\n    margin-bottom: 20px;\n  }\n  .controls-block__title {\n    margin: 0;\n    margin-bottom: 5px;\n    text-transform: uppercase;\n    font-size: 100%;\n  }\n  .buttons-row {\n    display: flex;\n  }\n  .buttons-row button {\n    width: 100%;\n  }\n  @supports (not (backdrop-filter: blur())) {\n    .controls {\n      background-color: rgba(150, 150, 150, 0.95);\n    }\n  }\n</style>\n","import App from './components/App.svelte';\nexport default new App({ target: document.body });\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","toggle_class","toggle","classList","current_component","set_current_component","afterUpdate","Error","get_current_component","after_update","bubble","type","slice","call","this","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","add_flush_callback","flushing","seen_callbacks","Set","flush","i","length","update","pop","has","add","clear","fragment","before_update","dirty","p","ctx","outroing","outros","transition_in","block","local","delete","transition_out","o","c","d","globals","window","globalThis","global","bind","index","props","undefined","bound","create_component","mount_component","customElement","on_mount","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","append_styles","parent_component","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","$on","indexOf","splice","$set","$$props","obj","$$set","keys","canvas","width","height","links","fields","fw","fh","r","colors","drawConnections","changeFormBySpeed","displacementMultiplier","drawCircle2","angle","Math","atan2","y","lastY","x","lastX","speed","hypot","fillStyle","beginPath","ellipse","min","pow","PI","getContext","fillRect","moveTo","lineTo","gradient","createLinearGradient","addColorStop","strokeStyle","lineWidth","max","stroke","j","field","k","arc","step","title","checked","entries","iterations","selectedId","idAndColor","subscriber_queue","showSettings","en","ru","hideSettings","copyLink","currentWorldSettings","simulationsPerFrame","temperature","friction","killAllParticles","newWorldSettings","particleTypesAmount","particleCount","createNewWorld","particleBrush","graphicalSettings","particleRadius","removeFromArray","array","item","innerWidth","innerHeight","lang","URLSearchParams","location","search","get","Number","nodeCount","MAX_DIST","speedMultiplier","maxDist2","RULE_SIZE","MAX_LINKS","COUPLINGS","MAX_LINKS_PER_COLOR","settingRuleSize","start","stop","subscribers","set","new_value","run_queue","subscriber","invalidate","size","writable","hash","substring","split","$settingRuleSize","startNew","history","pushState","random","floor","generateRules","addParticle","generateNodes","sx","sy","bonds","fx","fy","applyForce","dx","dy","dist2","da","db","typeCountA","bond","typeCountB","linkParticles","cos","sin","logic","magnitude","sqrt","link","dA","i1","j1","field1","jNext","field2","requestAnimationFrame","key","phrase","TRANSLATIONS","includes","links_hash","row","href","tempInput","body","select","execCommand","e","clientX","clientY"],"mappings":"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"}